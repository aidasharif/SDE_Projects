{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aidasharifrohani/Desktop/Final_submission/client/src/ReportTable.tsx\";\nimport React from 'react';\nimport { Card, Col, Row, Table } from 'antd';\nimport { db } from './Firebase';\nimport './ReportTable.css';\n/**\n * The ReportTable class displays information regarding saved reports for a logged in user as well as\n * the contents of a selected report.\n */\n\nexport default class ReportTable extends React.Component {\n  constructor(props) {\n    super(props); // access users in database\n\n    db.collection('users') // access user currently logged in\n    .doc(this.props.email + this.props.password).get() // access saved reports\n    .then(snapshot => this.initializeTable(snapshot.data()));\n    this.state = {\n      // name of selected report - Default: 'No Report Selected'\n      reportName: \"No report selected\",\n      reportContents: \"\"\n    };\n  }\n  /*\n  Ports the data stored on the firebase server into a text file to be displayed\n  on the screen.\n  */\n\n  /**\n   * Ports the data stored on the firebase server into a text file to be displayed\n   * on the screen.\n   * \n   * @param record the report key in firebase\n   * @param rowIndex row where the report was displayed\n   */\n\n\n  openReport(record, rowIndex) {\n    // access user info in database\n    db.collection('users').doc(this.props.email + this.props.password) // access reports for user\n    .collection('reports') // get the specified report\n    .doc('report' + record.key.toString()) // access the data inside the report\n    .get().then(snapshot => this.setReportData(rowIndex, JSON.stringify(snapshot.data()))) // if error, set report data to reflect error state\n    .catch(err => {\n      this.setState({\n        reportName: \"Error\",\n        reportContents: \"Could not open report\"\n      });\n    });\n  }\n  /**\n   * Gets the report as a json string and sets it to the report content.\n   * \n   * @param reportIndex index of the report in the table\n   * @param jsonString info from report\n   */\n\n\n  setReportData(reportIndex, jsonString) {\n    // parse json-ified data\n    let data = JSON.parse(jsonString); // set data to be displayed on screen\n\n    let title = `Report ${reportIndex}`;\n    let contents = data.data; // set state to given report info\n\n    this.setState({\n      reportName: title,\n      reportContents: contents\n    });\n  }\n  /**\n   *  Get the report info from the Firestore and formats it to be displayed in the table\n   *  on screen.\n   * \n   * @param snapshot user data\n   */\n\n\n  initializeTable(snapshot) {\n    // set column data to format table\n    let columns = [{\n      title: 'Report',\n      dataIndex: 'title'\n    }]; //for the number of reports i we make rows\n\n    let data = [];\n\n    for (let i = 0; i < snapshot.reports; i++) {\n      data.push({\n        key: i,\n        title: `Report ${i + 1}`\n      });\n    } // setting state to enable report opening by clicking on it \n\n\n    this.setState({\n      columns: columns,\n      data: data,\n      reports: snapshot.reports\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            margin: 50,\n            marginRight: 20\n          },\n          span: 10,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            pagination: false,\n            scroll: {\n              y: 600\n            },\n            className: \"report-table\",\n            columns: this.state.columns,\n            dataSource: this.state.data,\n            bordered: true,\n            onRow: (record, rowIndex) => {\n              return {\n                onClick: event => {\n                  // bind the call to instance here\n                  if (typeof rowIndex === 'number') {\n                    this.openReport(record, rowIndex);\n                  }\n                }\n              };\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            margin: 50,\n            marginLeft: 20\n          },\n          span: 11,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            title: this.state.reportName,\n            style: {\n              height: 780\n            },\n            className: \"report-card\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.reportContents\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/Users/aidasharifrohani/Desktop/Final_submission/client/src/ReportTable.tsx"],"names":["React","Card","Col","Row","Table","db","ReportTable","Component","constructor","props","collection","doc","email","password","get","then","snapshot","initializeTable","data","state","reportName","reportContents","openReport","record","rowIndex","key","toString","setReportData","JSON","stringify","catch","err","setState","reportIndex","jsonString","parse","title","contents","columns","dataIndex","i","reports","push","render","margin","marginRight","y","onClick","event","marginLeft","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, Col, Row, Table } from 'antd';\nimport {db} from './Firebase';\nimport './ReportTable.css';\n\n/**\n * The ReportTable class displays information regarding saved reports for a logged in user as well as\n * the contents of a selected report.\n */\nexport default class ReportTable extends React.Component<any, any> {\n\n    constructor(props: {}) {\n        super(props);\n\n        // access users in database\n        db.collection('users')\n        // access user currently logged in\n        .doc(this.props.email+this.props.password)\n        .get()\n        // access saved reports\n        .then(snapshot =>(this.initializeTable(snapshot.data())))\n\n        this.state = {\n            // name of selected report - Default: 'No Report Selected'\n            reportName: \"No report selected\",\n            reportContents: \"\",\n        }\n    }\n\n    /*\n    Ports the data stored on the firebase server into a text file to be displayed\n    on the screen.\n    */\n\n    /**\n     * Ports the data stored on the firebase server into a text file to be displayed\n     * on the screen.\n     * \n     * @param record the report key in firebase\n     * @param rowIndex row where the report was displayed\n     */\n    openReport(record:any, rowIndex:any) : void {\n        // access user info in database\n        db.collection('users').doc(this.props.email+this.props.password)\n        // access reports for user\n        .collection('reports')\n        // get the specified report\n        .doc('report'+record.key.toString())\n        // access the data inside the report\n        .get().then(snapshot => (this.setReportData(rowIndex, JSON.stringify(snapshot.data()))))\n        // if error, set report data to reflect error state\n        .catch(err => {\n            this.setState({\n            reportName: \"Error\",\n            reportContents: \"Could not open report\"\n        })\n        });\n    }\n\n    /**\n     * Gets the report as a json string and sets it to the report content.\n     * \n     * @param reportIndex index of the report in the table\n     * @param jsonString info from report\n     */\n    setReportData(reportIndex: number, jsonString: string) : void {\n        // parse json-ified data\n        let data = JSON.parse(jsonString);\n\n        // set data to be displayed on screen\n        let title = `Report ${reportIndex}`\n        let contents = data.data;\n\n        // set state to given report info\n        this.setState({\n            reportName: title,\n            reportContents: contents,\n        })\n    }\n\n    /**\n     *  Get the report info from the Firestore and formats it to be displayed in the table\n     *  on screen.\n     * \n     * @param snapshot user data\n     */\n    initializeTable(snapshot:any) : void {\n        // set column data to format table\n        let columns = [\n            {\n              title: 'Report',\n              dataIndex: 'title',\n            }\n        ]\n\n        //for the number of reports i we make rows\n        let data=[]\n        for (let i = 0; i < snapshot.reports; i++) {\n            data.push({\n            key: i,\n            title: `Report ${i + 1}`\n            });\n        }\n\n        // setting state to enable report opening by clicking on it \n        this.setState({\n            columns: columns,\n            data: data,\n            reports: snapshot.reports\n        })\n    }\n\n    render() {\n        return <>\n        <Row>\n        <Col style={{margin: 50,marginRight:20}} span={10}>\n            <Table\n            pagination={false}\n            scroll={{y:600}}\n            className='report-table'\n            columns={this.state.columns} \n            dataSource={this.state.data} \n            bordered \n            onRow={(record:any, rowIndex:any) => { return {\n                onClick: (event: any) => {\n                    // bind the call to instance here\n                    if(typeof rowIndex === 'number') {\n                        this.openReport(record, rowIndex);\n                    }\n                }};\n            }}  \n            />\n        </Col >\n            <Col style={{margin: 50,marginLeft:20}} span={11}>\n                <Card \n                    title={this.state.reportName} \n                    style={{height: 780}}\n                    className='report-card'\n                >\n                    <p>{this.state.reportContents}</p>\n                </Card>\n            </Col>\n        </Row>\n        </>   \n    }\n}"]},"metadata":{},"sourceType":"module"}