{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aidasharifrohani/Desktop/Final_submission/client/src/Comparison.tsx\";\nimport { Col, Row, Button, Table } from 'antd';\nimport React from 'react';\nimport Title from 'antd/lib/typography/Title';\nimport './Comparison.css';\nimport scrollIntoView from 'scroll-into-view';\nimport { db } from './Firebase';\n/**\n * contains info about a specific file\n */\n\n/**\n * the Comparison class is responsible for showing the results of the comparison\n * results are gathered and parsed in FileUploader after call to server\n */\nexport default class Comparison extends React.Component {\n  // column info for tables in comparison view\n\n  /**\n   * Parse the data passed from parent component to build display information for \n   * files that have been compared as well as instance of plagiarism between\n   * those files.\n   * \n   * @param props values passed from the parent component\n   */\n  constructor(props) {\n    super(props); // port all instances into current instance info interface\n\n    this.instanceColumns = void 0;\n    this.fileColumns = void 0;\n    this.codeColumns = void 0;\n\n    this.handleScroll = () => {\n      // scroll plagiarism instance for window 1 into view\n      scrollIntoView(document.querySelector('.row-selected-a'), {\n        align: {\n          top: 0\n        }\n      }); // scroll plagiarism instance for window 2 into view\n\n      scrollIntoView(document.querySelector('.row-selected-b'), {\n        align: {\n          top: 0\n        }\n      });\n    };\n\n    let parentInstances = this.props.instances;\n    let instances = [];\n\n    for (let i = 0; i < parentInstances.length; ++i) {\n      instances.push({\n        fileName1: parentInstances[i].fileName1,\n        lines1: parentInstances[i].lines1Start.toString() + ' - ' + parentInstances[i].lines1End.toString(),\n        fileName2: parentInstances[i].fileName2,\n        lines2: parentInstances[i].lines2Start.toString() + ' - ' + parentInstances[i].lines2End.toString(),\n        lines1Start: parentInstances[i].lines1Start,\n        lines1End: parentInstances[i].lines1End,\n        lines2Start: parentInstances[i].lines2Start,\n        lines2End: parentInstances[i].lines2End\n      });\n    } // find and format all information for project 1 and related files\n\n\n    let project1Files = [];\n    let p1Files = this.props.project1Files;\n    this.populateProjectFiles(project1Files, p1Files, instances, '1'); // find and format all information for project 2 and related files\n\n    let project2Files = [];\n    let p2Files = this.props.project2Files;\n    this.populateProjectFiles(project2Files, p2Files, instances, '2'); // set the state\n\n    this.state = {\n      // content is the string representation for the component to be displayed in the main part of the window\n      content: 'Overview',\n      // window1File is CodeInfo[] displayed in window 1\n      window1File: null,\n      // window1FileName is the name of the file being displayed in window 1\n      window1FileName: null,\n      // window2File is CodeInfo[] displayed in window 2\n      window2File: null,\n      // window2FileName is the name of hte file being displayed in window 2\n      window2FileName: null,\n      // instanceInfo is the collection of InstanceInfo[] to be used to save reports\n      instanceInfo: instances,\n      // instances are DisplayInstance[] for instances within the corresponding selected file\n      displayInstances: null,\n      // instance is the InstanceInfo[] related to the current instance\n      instance: null,\n      // the number of instances of plagiarism from the comparison\n      totalInstances: this.props.instances.length,\n      // the percentage of the file that exhibits plagiarism\n      score: this.props.score,\n      // project1Files are FileInfo[] in project 1\n      project1Files: project1Files,\n      // project2Files are FileInfo[] in project 2\n      project2Files: project2Files,\n      // selectedFiles are FileInfo[] for project selected in window\n      selectedFiles: project1Files,\n      // selectedFile is FileInfo for file being evaluated\n      selectedFile: null,\n      // the row of the selected file in the file window\n      fileRow: -1,\n      // the row of the selected instance in the instance window\n      instanceRow: -1\n    }; // defines keys and titles for columns to be used in tables\n    // files are listed purely by name\n\n    this.fileColumns = [{\n      dataIndex: 'fileName'\n    }]; // instances listed by files and relevant lines\n\n    this.instanceColumns = [{\n      title: 'Files',\n      dataIndex: 'fileName',\n      width: '55%'\n    }, {\n      title: 'Lines',\n      dataIndex: 'lines',\n      width: '45%'\n    }]; // columns listed by line and code at line in file\n\n    this.codeColumns = [{\n      dataIndex: 'line',\n      width: '5%'\n    }, {\n      dataIndex: 'code',\n      width: '95%'\n    }];\n  }\n  /**\n   * Populates the FileInfo[] project files with filenames, code, and instances.\n   * \n   * @param clientProject project to populate\n   * @param serverFiles corresponding project files from parent component\n   * @param instances instances of plagiarism\n   */\n\n\n  populateProjectFiles(clientProject, serverFiles, instances, project) {\n    for (let i = 0; i < serverFiles.length; ++i) {\n      // generate code info for file\n      let fileName = serverFiles[i].fileName;\n      let code = serverFiles[i].code; // split contents by newlines -- creates collection where line# = index + 1\n\n      let lines = code.split('\\n');\n      let fileCode = []; // iterate through lines in code and add to CodeInfo interface\n\n      for (let j = 0; j < lines.length; ++j) {\n        // include name of file, line of code, and the line code appears on\n        fileCode.push({\n          fileName: fileName,\n          code: lines[j],\n          line: (j + 1).toString()\n        });\n      }\n\n      let currInstances = []; // generate instance list\n\n      for (let j = 0; j < instances.length; ++j) {\n        if (instances[j].fileName1 === fileName || instances[j].fileName2 === fileName) {\n          currInstances.push(instances[j]);\n        }\n      } // add all file info to project file\n\n\n      if (project === '1') {\n        clientProject.push({\n          project: '1',\n          fileName: fileName,\n          code: fileCode,\n          instances: currInstances\n        });\n      } else {\n        clientProject.push({\n          project: '2',\n          fileName: fileName,\n          code: fileCode,\n          instances: currInstances\n        });\n      }\n    }\n  }\n  /** \n   * Finds and sets the files to be displayed in the Files table.\n   */\n\n\n  displayFiles(file) {\n    // set the files to be displayed based on string flag\n    // \"1\" for project 1, \"2\" for project 2\n    let nextFiles = null;\n\n    if (file === \"1\") {\n      nextFiles = this.state.project1Files;\n    } else if (file === \"2\") {\n      nextFiles = this.state.project2Files;\n    } // set info for all subsequent windows to null so that no lingering information\n    // is displayed to the user\n\n\n    this.setState({\n      // set the state such that nextFiles are the files corresponding to the\n      // selected project\n      selectedFiles: nextFiles,\n      selectedFile: null,\n      instances: null,\n      window1File: null,\n      window1FileName: null,\n      window2File: null,\n      window2FileName: null,\n      fileRow: -1,\n      instanceRow: -1\n    });\n  }\n  /**\n   * Finds and sets instances of plagiarism associated with the file selected\n   * in the File table.\n   * \n   * @param file the file information that holds the display instances\n   * @param rowIndex the index of the file that was selected\n   */\n\n\n  displayInstances(file, rowIndex) {\n    // get the instances associated with the given file and set array to collect \n    // relevant instances\n    let instances = file.instances;\n    let displayInstances = [];\n    let recorded = []; // iterate through all isntances, find all instances associated with the\n    // given file and collect the names of the OTHER FILE that has matching instance\n    // of plagiarism\n\n    for (let i = 0; i < instances.length; ++i) {\n      if (file.fileName === instances[i].fileName1 // catch duplicate instance that has a mirror instance from project 1 -> 2\n      && !recorded.find(curr => curr.fileName === instances[i].fileName2 && curr.lines === instances[i].lines2)) {\n        let displayInstance = {\n          fileName: instances[i].fileName2,\n          lines: instances[i].lines2,\n          originalInstance: instances[i]\n        };\n        displayInstances.push(displayInstance);\n        recorded.push(displayInstance);\n      } // catch duplicate isntance that has a mirror instance from project 2 -> 1\n      else if (!recorded.find(curr => curr.fileName === instances[i].fileName1 && curr.lines === instances[i].lines1)) {\n          let displayInstance = {\n            fileName: instances[i].fileName1,\n            lines: instances[i].lines1,\n            originalInstance: instances[i]\n          };\n          displayInstances.push(displayInstance);\n          recorded.push(displayInstance);\n        }\n    }\n\n    this.setState({\n      // set instances to be displayed in instance window\n      instances: displayInstances,\n      // set selected file\n      selectedFile: file,\n      // set window1 and window2 file to null such that any linger information about\n      // previous files are hidden\n      window1File: null,\n      window2File: null,\n      // set fileRow to be the given index in order to highlight file that is currently\n      // selected\n      fileRow: rowIndex,\n      // set instanceRow to -1 so that no instance in the Instance table is highlighted\n      instanceRow: -1\n    });\n  }\n  /**\n   * Display the contents of a file and the filename to a Code Window on the screen.\n   * \n   * @param instance the plagiarism instance to be evaluated\n   * @param rowIndex the row index of the selected file\n   */\n\n\n  displayFile(instance, rowIndex) {\n    // find the code associated with the selected file and the file name of\n    // the selected file\n    let window1 = this.state.selectedFile.code;\n    let window1FileName = this.state.selectedFile.fileName; // get the name of the file with the corresponding instance of plagiarism\n\n    let otherFile = instance.fileName; // set variables to hold relvant information about corresponding file\n\n    let window2 = null;\n    let window2FileName = ''; // find the corresponding file and code for the selected instance of plagiarism\n    // to be displayed in Code window 2\n\n    if (this.state.selectedFile.project === '1') {\n      for (let i = 0; i < this.state.project2Files.length; ++i) {\n        // if project 2 file at i is other file specified in instance\n        // get filename and code from instance and break\n        if (this.state.project2Files[i].fileName === otherFile) {\n          window2 = this.state.project2Files[i].code;\n          window2FileName = this.state.project2Files[i].fileName;\n          break;\n        }\n      }\n    } else {\n      for (let i = 0; i < this.state.project1Files.length; ++i) {\n        // if project 1 file at is is other file specified in instance\n        // get filename and code from instance and break\n        if (this.state.project1Files[i].fileName === otherFile) {\n          window2 = this.state.project1Files[i].code;\n          window2FileName = this.state.project1Files[i].fileName;\n          break;\n        }\n      }\n    } // set information to display code and filename for primary file and\n    // corresponding file\n    // set instance row index to appropriately color selected instnace\n\n\n    this.setState({\n      content: 'Detailed',\n      window1File: window1,\n      window1FileName: window1FileName,\n      window2File: window2,\n      window2FileName: window2FileName,\n      instance: instance.originalInstance,\n      instanceRow: rowIndex\n    });\n  }\n  /**\n   * Determine whether or not the current line is part of an instance of plagiarism. \n   * Used to highlight instances of plagiarism.\n   * \n   * @param record the code info instance at the given index\n   * @param index the line number of the code info instance\n   */\n\n\n  getRowColor(record, index) {\n    // get the instance of plagiarism being displayed\n    let instance = this.state.instance; // if the given row falls within the instance of plagiarism for the file\n    // displayed in the window, return true, otherwise return false\n\n    if (record.fileName === instance.fileName1) {\n      return index >= instance.lines1Start - 1 && index <= instance.lines1End - 1;\n    } else {\n      return index >= instance.lines2Start - 1 && index <= instance.lines2End - 1;\n    }\n  }\n  /**\n   * Determine whether or not the given line corresponds to the given index.\n   * \n   * @param rowIndex the index of the row being evaluated\n   * @param selectedIndex the index of the row that is being looked for\n   */\n\n\n  getEntryColor(rowIndex, selectedIndex) {\n    return rowIndex === selectedIndex;\n  }\n  /**\n   * Get the FileName for the project displayed in a Code window.\n   * \n   * @param isProject1 whether or not the project file being displayed is for the\n   *                   file displayed in window 1\n   */\n\n\n  getFileName(isProject1) {\n    // if the the file name for a file in the window is not null, return the\n    // filename -- otherwise, return generic \"file#\" to be displayed until a\n    // file is chosen\n    if (isProject1) {\n      if (this.state.window1FileName != null) {\n        return this.state.window1FileName;\n      } else {\n        return \"file1\";\n      }\n    } else {\n      if (this.state.window2FileName != null) {\n        return this.state.window2FileName;\n      } else {\n        return \"file2\";\n      }\n    }\n  }\n  /**\n  * Generates a report for the results of the plagiarism comparison as a string.\n  * Formats the data to be stored in Firebase under logged in account.\n  */\n\n\n  generateReport() {\n    let reportString = \"\"; // set percentage\n\n    reportString += \"Project files were \" + this.state.score + \"% similar.\\n\\n\"; // set number of instances\n\n    reportString += this.state.totalInstances + \" instances of plagiarism were detected.\\n\\n\"; // list files for project 1\n\n    reportString += \"Project 1 Files:\\n\";\n    let p1Files = this.state.project1Files;\n\n    for (let i = 0; i < p1Files.length; ++i) {\n      reportString += \"\\t- \" + p1Files[i].fileName + \"\\n\";\n    }\n\n    reportString += \"\\n\"; // list files for project 2\n\n    reportString += \"Project 2 Files:\\n\";\n    let p2Files = this.state.project2Files;\n\n    for (let i = 0; i < p2Files.length; ++i) {\n      reportString += \"\\t- \" + p2Files[i].fileName + \"\\n\";\n    }\n\n    reportString += \"\\n\"; // detail instances\n\n    reportString += \"Instances:\\n\";\n    let instances = this.state.instanceInfo; // collect instances such that filename and lines of plagiarism are recorded\n\n    for (let i = 0; i < instances.length; ++i) {\n      let file1String = instances[i].fileName1 + \" lines \" + instances[i].lines1;\n      let file2String = instances[i].fileName2 + \" lines \" + instances[i].lines2;\n      reportString += \"\\t- \" + file1String + \" : \" + file2String + \"\\n\";\n    } // return report string as 'data' in object\n\n\n    return {\n      data: reportString\n    };\n  }\n  /**\n   * Saves a report of the results from the plagiarism comparison to the logged \n   * in account in Firebase as a string.\n   */\n\n\n  saveReport() {\n    let reportData = this.generateReport();\n    db.collection('users').doc(this.props.email + this.props.password).collection('reports').doc('report' + this.props.reports).set(reportData);\n    const user = {\n      uid: this.props.email,\n      up: this.props.password,\n      reports: this.props.reports + 1\n    };\n    db.collection('users').doc(user.uid + user.up).set(user);\n    this.props.setReportNumber(this.props.reports + 1);\n  }\n  /**\n   * Scroll to the first line in an instance of plagiarism in code window 1 and 2.\n   */\n\n\n  /**\n   * Calls methods to be performed after a component in Comparison updates.\n   */\n  componentDidUpdate() {\n    this.handleScroll();\n  }\n  /**\n  * Sets the detailed layout for the Comparison page with code windows and\n  * specific instances of plagiarism.\n  */\n\n\n  handleDetailed() {\n    this.setState({\n      content: 'Detailed'\n    });\n  }\n  /**\n   * Sets the overview layout for the Comparison page with the overall results\n   * of the plagiarism comparison.\n   */\n\n\n  handleOverview() {\n    this.setState({\n      content: 'Overview',\n      selectedFile: null,\n      instances: null,\n      window1File: null,\n      window1FileName: null,\n      window2File: null,\n      window2FileName: null,\n      fileRow: -1,\n      instanceRow: -1\n    });\n  }\n  /**\n   * Displays the content in the middle-left side of the screen (code window or plagiarism\n   * overview).\n   */\n\n\n  displayMainContent() {\n    let content = this.state.content;\n\n    switch (content) {\n      // if Overview, create Overview object\n      case 'Overview':\n        return this.displayOverview();\n      // if Detailed, created object with code from files in code windows\n\n      case 'Detailed':\n        return this.displayCodeWindows();\n    }\n  }\n  /**\n   * Displays code in windows to view instances of plagiarism.\n   */\n\n\n  displayCodeWindows() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 9,\n        style: {\n          paddingRight: '1%'\n        },\n        className: \"col-style\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Title, {\n            style: {\n              fontSize: 25,\n              marginBottom: 0,\n              paddingLeft: 15,\n              border: '2px solid black'\n            },\n            children: this.getFileName(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            showHeader: false,\n            columns: this.codeColumns,\n            dataSource: this.state.window1File,\n            pagination: false,\n            scroll: {\n              y: 100,\n              x: 100\n            },\n            bordered: false,\n            style: {\n              width: '100%',\n              height: 728,\n              background: 'white',\n              border: '2px solid black'\n            },\n            className: \"code-table\",\n            rowClassName: (record, index) => this.getRowColor(record, index) ? \"row-selected-a\" : \"row-unselected\",\n            children: /*#__PURE__*/_jsxDEV(Table.Column, {\n              title: \"code\"\n            }, 'line', false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 9,\n        className: \"col-style\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Title, {\n            style: {\n              fontSize: 25,\n              marginBottom: 0,\n              paddingLeft: 15,\n              border: '2px solid black'\n            },\n            children: this.getFileName(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            showHeader: false,\n            columns: this.codeColumns,\n            dataSource: this.state.window2File,\n            pagination: false,\n            scroll: {\n              y: 100,\n              x: 100\n            },\n            bordered: false,\n            style: {\n              width: '100%',\n              height: 728,\n              background: 'white',\n              border: '2px solid black'\n            },\n            className: \"code-table\",\n            rowClassName: (record, index) => this.getRowColor(record, index) ? \"row-selected-b\" : \"row-unselected\",\n            children: /*#__PURE__*/_jsxDEV(Table.Column, {\n              title: \"code\"\n            }, 'line', false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  /**\n   * Displays an overview of results for the plagiarism comparison.\n   */\n\n\n  displayOverview() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        span: 10,\n        style: {\n          margin: 200\n        },\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          style: {\n            width: 650,\n            paddingTop: 150,\n            height: 200,\n            textAlign: 'center',\n            backgroundColor: '#d41b2e'\n          },\n          children: /*#__PURE__*/_jsxDEV(Title, {\n            style: {\n              color: 'white',\n              width: 'inherit'\n            },\n            children: [this.state.score, \"% Similar\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          style: {\n            width: 650,\n            height: 200,\n            textAlign: 'center',\n            backgroundColor: '#d41b2e'\n          },\n          children: /*#__PURE__*/_jsxDEV(Title, {\n            style: {\n              color: 'white',\n              width: 'inherit'\n            },\n            children: [this.state.totalInstances, \" Instances of Plagiarism Detected\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n  /**\n   * Formats the \"Save\" button displayed on screen. If a user is logged in, is\n   * interactable. Otherwise, the button is disabled.\n   */\n\n\n  getSaveButton() {\n    if (this.props.loggedin) {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          fontSize: 12\n        },\n        onClick: this.saveReport.bind(this),\n        className: \"detail-button\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          fontSize: 12\n        },\n        disabled: true,\n        className: \"detail-button\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          paddingTop: 25,\n          paddingRight: 10,\n          width: 'inherit',\n          overflow: 'clip'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          span: 5,\n          style: {\n            padding: 10,\n            paddingTop: 0\n          },\n          className: \"col-style\",\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            align: \"middle\",\n            justify: \"center\",\n            style: {\n              width: 'inherit',\n              height: 50,\n              background: \"white\",\n              border: \"2px solid black\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                fontSize: 12\n              },\n              className: \"detail-button\",\n              onClick: this.handleOverview.bind(this),\n              children: \"Overview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                fontSize: 12\n              },\n              className: \"detail-button\",\n              onClick: this.handleDetailed.bind(this),\n              children: \"Detailed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 21\n            }, this), this.getSaveButton()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            justify: \"start\",\n            align: \"middle\",\n            style: {\n              marginTop: 5,\n              width: 'inherit',\n              height: 33,\n              background: \"white\",\n              border: \"2px solid black\",\n              textOverflow: 'ellipsis',\n              overflow: 'hidden'\n            },\n            children: /*#__PURE__*/_jsxDEV(Title, {\n              style: {\n                paddingLeft: 10,\n                fontSize: 20\n              },\n              children: \"Project Files\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            justify: \"start\",\n            style: {\n              width: 'inherit',\n              height: 40,\n              background: \"white\",\n              border: \"2px solid black\",\n              borderTop: 0,\n              borderBottom: 0,\n              borderSpacing: 0\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                height: '100%',\n                width: '33%',\n                textOverflow: 'ellipsis',\n                overflow: 'hidden'\n              },\n              onClick: () => this.displayFiles('1'),\n              children: \"Project 1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                height: '100%',\n                width: '33%',\n                textOverflow: 'ellipsis',\n                overflow: 'hidden'\n              },\n              onClick: () => this.displayFiles('2'),\n              children: \"Project 2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            style: {\n              height: 291\n            },\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              showHeader: false,\n              columns: this.fileColumns,\n              dataSource: this.state.selectedFiles,\n              pagination: false,\n              scroll: {\n                y: 200\n              },\n              bordered: true,\n              style: {\n                width: '100%',\n                height: '100%',\n                background: 'white',\n                border: '2px solid black'\n              },\n              onRow: (record, rowIndex) => {\n                return {\n                  onClick: event => {\n                    // bind the call to instance here\n                    if (typeof rowIndex === 'number') {\n                      this.displayInstances(record, rowIndex);\n                    }\n                  }\n                };\n              },\n              className: \"file-table\",\n              rowClassName: (record, index) => this.getEntryColor(index, this.state.fileRow) ? \"entry-selected\" : \"entry-unselected\",\n              children: /*#__PURE__*/_jsxDEV(Table.Column, {\n                title: \"lines\"\n              }, 'fileName', false, {\n                fileName: _jsxFileName,\n                lineNumber: 716,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            justify: \"start\",\n            align: \"middle\",\n            style: {\n              marginTop: 5,\n              width: 'inherit',\n              height: 30,\n              background: \"white\",\n              border: \"2px solid black\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Title, {\n              style: {\n                paddingLeft: 10,\n                fontSize: 20\n              },\n              children: \"Instances\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            style: {\n              marginTop: 0,\n              height: 309\n            },\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Table, {\n                columns: this.instanceColumns,\n                dataSource: this.state.instances,\n                pagination: false,\n                scroll: {\n                  y: 200\n                },\n                bordered: true,\n                style: {\n                  width: '100%',\n                  height: '100%',\n                  background: 'white',\n                  border: '2px solid black'\n                },\n                onRow: (record, rowIndex) => {\n                  return {\n                    onClick: event => {\n                      // bind the call to instance here\n                      if (typeof rowIndex === 'number') {\n                        this.displayFile(record, rowIndex);\n                      }\n                    }\n                  };\n                },\n                className: \"instance-table\",\n                rowClassName: (record, index) => this.getEntryColor(index, this.state.instanceRow) ? \"entry-selected\" : \"entry-unselected\",\n                children: /*#__PURE__*/_jsxDEV(Table.Column, {\n                  title: \"lines\"\n                }, 'fileName', false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 747,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 727,\n                columnNumber: 21\n              }, this)\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 13\n        }, this), this.displayMainContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 18\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/Users/aidasharifrohani/Desktop/Final_submission/client/src/Comparison.tsx"],"names":["Col","Row","Button","Table","React","Title","scrollIntoView","db","Comparison","Component","constructor","props","instanceColumns","fileColumns","codeColumns","handleScroll","document","querySelector","align","top","parentInstances","instances","i","length","push","fileName1","lines1","lines1Start","toString","lines1End","fileName2","lines2","lines2Start","lines2End","project1Files","p1Files","populateProjectFiles","project2Files","p2Files","state","content","window1File","window1FileName","window2File","window2FileName","instanceInfo","displayInstances","instance","totalInstances","score","selectedFiles","selectedFile","fileRow","instanceRow","dataIndex","title","width","clientProject","serverFiles","project","fileName","code","lines","split","fileCode","j","line","currInstances","displayFiles","file","nextFiles","setState","rowIndex","recorded","find","curr","displayInstance","originalInstance","displayFile","window1","otherFile","window2","getRowColor","record","index","getEntryColor","selectedIndex","getFileName","isProject1","generateReport","reportString","file1String","file2String","data","saveReport","reportData","collection","doc","email","password","reports","set","user","uid","up","setReportNumber","componentDidUpdate","handleDetailed","handleOverview","displayMainContent","displayOverview","displayCodeWindows","paddingRight","fontSize","marginBottom","paddingLeft","border","y","x","height","background","margin","paddingTop","textAlign","backgroundColor","color","getSaveButton","loggedin","bind","render","overflow","padding","marginTop","textOverflow","borderTop","borderBottom","borderSpacing","onClick","event"],"mappings":"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","sourcesContent":["import { Col, Row, Button, Table } from 'antd';\nimport React from 'react';\nimport Title from 'antd/lib/typography/Title';\nimport './Comparison.css';\nimport scrollIntoView from 'scroll-into-view';\nimport {db} from './Firebase';\n\n/**\n * contains info about a specific file\n */\ninterface FileInfo {\n    project: string;\n    fileName: string;\n    code: CodeInfo[];\n    instances: InstanceInfo[];\n}\n\n/**\n * contains generic info about an instance of plagiarism\n */\ninterface InstanceInfo {\n    fileName1: string;\n    lines1: string;\n    lines1Start: number,\n    lines1End: number,\n    fileName2: string;\n    lines2: string;\n    lines2Start: number,\n    lines2End: number,\n}\n\n/**\n * contains information about code in a file (line # | {code} )\n */\ninterface CodeInfo {\n    fileName: string,\n    code: string;\n    line: string;\n}\n\n/**\n * contains info about instance of plagiarism to be displayed in Instance table\n * pertains only to corresponding instance of plagiarism in other file\n * file name here is NOT SELECTED FILE - IS CORRESPONDING FILE\n */\ninterface DisplayInstance {\n    fileName: string;\n    lines: string;\n    originalInstance: InstanceInfo;\n}\n\n/**\n * the Comparison class is responsible for showing the results of the comparison\n * results are gathered and parsed in FileUploader after call to server\n */\nexport default class Comparison extends React.Component<any, any> {\n\n    // column info for tables in comparison view\n    instanceColumns!: object[];\n    fileColumns!: object[];\n    codeColumns!: object[];\n\n    /**\n     * Parse the data passed from parent component to build display information for \n     * files that have been compared as well as instance of plagiarism between\n     * those files.\n     * \n     * @param props values passed from the parent component\n     */\n    constructor(props: {}) {\n        super(props);\n\n        // port all instances into current instance info interface\n        let parentInstances = this.props.instances;\n        let instances: InstanceInfo[] = [];\n        for (let i = 0; i < parentInstances.length; ++i) {\n            instances.push({\n                fileName1: parentInstances[i].fileName1, \n                lines1:(parentInstances[i].lines1Start.toString() + ' - ' + parentInstances[i].lines1End.toString()),\n                fileName2: parentInstances[i].fileName2, \n                lines2:(parentInstances[i].lines2Start.toString() + ' - ' + parentInstances[i].lines2End.toString()),\n                lines1Start: parentInstances[i].lines1Start,\n                lines1End: parentInstances[i].lines1End,\n                lines2Start: parentInstances[i].lines2Start,\n                lines2End: parentInstances[i].lines2End\n            })\n        }\n\n        // find and format all information for project 1 and related files\n        let project1Files: FileInfo[] = [];\n        let p1Files = this.props.project1Files\n        this.populateProjectFiles(project1Files, p1Files, instances, '1');\n\n        // find and format all information for project 2 and related files\n        let project2Files: FileInfo[] = [];\n        let p2Files = this.props.project2Files\n        this.populateProjectFiles(project2Files, p2Files, instances, '2');\n        \n        // set the state\n        this.state = {\n            // content is the string representation for the component to be displayed in the main part of the window\n            content: 'Overview',\n            // window1File is CodeInfo[] displayed in window 1\n            window1File: null,\n            // window1FileName is the name of the file being displayed in window 1\n            window1FileName: null,\n            // window2File is CodeInfo[] displayed in window 2\n            window2File: null,\n            // window2FileName is the name of hte file being displayed in window 2\n            window2FileName: null,\n            // instanceInfo is the collection of InstanceInfo[] to be used to save reports\n            instanceInfo: instances,\n            // instances are DisplayInstance[] for instances within the corresponding selected file\n            displayInstances: null,\n            // instance is the InstanceInfo[] related to the current instance\n            instance: null,\n            // the number of instances of plagiarism from the comparison\n            totalInstances: this.props.instances.length,\n            // the percentage of the file that exhibits plagiarism\n            score: this.props.score,\n            // project1Files are FileInfo[] in project 1\n            project1Files: project1Files,\n            // project2Files are FileInfo[] in project 2\n            project2Files: project2Files,\n            // selectedFiles are FileInfo[] for project selected in window\n            selectedFiles: project1Files,\n            // selectedFile is FileInfo for file being evaluated\n            selectedFile: null,\n            // the row of the selected file in the file window\n            fileRow: -1,\n            // the row of the selected instance in the instance window\n            instanceRow: -1\n        }\n\n        // defines keys and titles for columns to be used in tables\n        // files are listed purely by name\n        this.fileColumns = [\n            {dataIndex:'fileName'}\n        ]\n\n        // instances listed by files and relevant lines\n        this.instanceColumns = [\n            {title: 'Files', dataIndex: 'fileName', width:'55%'},\n            {title: 'Lines', dataIndex: 'lines', width:'45%'}\n        ];\n\n        // columns listed by line and code at line in file\n        this.codeColumns = [\n            {dataIndex:'line', width:'5%'},\n            {dataIndex:'code', width:'95%'}\n        ]\n    }\n\n    /**\n     * Populates the FileInfo[] project files with filenames, code, and instances.\n     * \n     * @param clientProject project to populate\n     * @param serverFiles corresponding project files from parent component\n     * @param instances instances of plagiarism\n     */\n    populateProjectFiles(clientProject: FileInfo[], serverFiles: any, instances: InstanceInfo[], \n                        project: string) : void {\n        \n        for (let i = 0; i < serverFiles.length; ++i) {\n\n            // generate code info for file\n            let fileName = serverFiles[i].fileName;\n            let code = serverFiles[i].code;\n            // split contents by newlines -- creates collection where line# = index + 1\n            let lines = code.split('\\n');\n            let fileCode: CodeInfo[] = [];\n            // iterate through lines in code and add to CodeInfo interface\n            for (let j = 0; j < lines.length; ++j) {\n                // include name of file, line of code, and the line code appears on\n                fileCode.push({fileName: fileName, code:lines[j], line:(j+1).toString()})\n            }\n\n            let currInstances: InstanceInfo[] = [];\n            // generate instance list\n            for (let j = 0; j < instances.length; ++j) {\n                if (instances[j].fileName1 === fileName || instances[j].fileName2 === fileName) {\n                    currInstances.push(instances[j]);\n                }\n            }\n\n            // add all file info to project file\n            if (project === '1') {\n                clientProject.push({project: '1', fileName: fileName, code:fileCode, instances:currInstances})\n            } else {\n                clientProject.push({project: '2', fileName: fileName, code:fileCode, instances:currInstances})\n            }\n        }\n    }\n\n    /** \n     * Finds and sets the files to be displayed in the Files table.\n     */\n    displayFiles(file: string) : void {\n        // set the files to be displayed based on string flag\n        // \"1\" for project 1, \"2\" for project 2\n        let nextFiles = null;\n        if (file === \"1\") {\n            nextFiles = this.state.project1Files;\n        } else if (file === \"2\") {\n            nextFiles = this.state.project2Files;\n        }\n\n        // set info for all subsequent windows to null so that no lingering information\n        // is displayed to the user\n        this.setState({\n            // set the state such that nextFiles are the files corresponding to the\n            // selected project\n            selectedFiles: nextFiles,\n            selectedFile: null,\n            instances: null,\n            window1File: null,\n            window1FileName: null,\n            window2File: null,\n            window2FileName: null,\n            fileRow: -1,\n            instanceRow: -1\n        });\n    }\n\n\n    /**\n     * Finds and sets instances of plagiarism associated with the file selected\n     * in the File table.\n     * \n     * @param file the file information that holds the display instances\n     * @param rowIndex the index of the file that was selected\n     */\n    displayInstances(file: FileInfo, rowIndex: number) : void {\n        // get the instances associated with the given file and set array to collect \n        // relevant instances\n        let instances = file.instances;\n        let displayInstances: DisplayInstance[] = [];\n        let recorded: DisplayInstance[] = [];\n\n        // iterate through all isntances, find all instances associated with the\n        // given file and collect the names of the OTHER FILE that has matching instance\n        // of plagiarism\n        for (let i = 0; i < instances.length; ++i) {\n            if (file.fileName === instances[i].fileName1 \n                // catch duplicate instance that has a mirror instance from project 1 -> 2\n                && !recorded.find(curr => ( curr.fileName === instances[i].fileName2 \n                                            && curr.lines === instances[i].lines2))) {\n\n                let displayInstance = {\n                    fileName: instances[i].fileName2, \n                    lines: instances[i].lines2, \n                    originalInstance: instances[i]\n                }\n                displayInstances.push(displayInstance);\n                recorded.push(displayInstance);\n            } \n            // catch duplicate isntance that has a mirror instance from project 2 -> 1\n            else if (!recorded.find(curr => ( curr.fileName === instances[i].fileName1 \n                                                && curr.lines === instances[i].lines1))) {\n                let displayInstance = {\n                    fileName: instances[i].fileName1, \n                    lines: instances[i].lines1, \n                    originalInstance: instances[i]\n                }\n                displayInstances.push(displayInstance);\n                recorded.push(displayInstance);\n            }\n            \n        }\n\n        this.setState({ \n            // set instances to be displayed in instance window\n            instances: displayInstances, \n            // set selected file\n            selectedFile: file,\n            // set window1 and window2 file to null such that any linger information about\n            // previous files are hidden\n            window1File: null,\n            window2File: null,\n            // set fileRow to be the given index in order to highlight file that is currently\n            // selected\n            fileRow: rowIndex,\n            // set instanceRow to -1 so that no instance in the Instance table is highlighted\n            instanceRow: -1\n        })\n    }\n\n    /**\n     * Display the contents of a file and the filename to a Code Window on the screen.\n     * \n     * @param instance the plagiarism instance to be evaluated\n     * @param rowIndex the row index of the selected file\n     */\n    displayFile(instance: DisplayInstance, rowIndex: number) : void {\n\n        // find the code associated with the selected file and the file name of\n        // the selected file\n        let window1 = this.state.selectedFile.code;\n        let window1FileName = this.state.selectedFile.fileName;\n        // get the name of the file with the corresponding instance of plagiarism\n        let otherFile = instance.fileName;\n\n        // set variables to hold relvant information about corresponding file\n        let window2 = null;\n        let window2FileName = '';\n        \n        // find the corresponding file and code for the selected instance of plagiarism\n        // to be displayed in Code window 2\n        if (this.state.selectedFile.project === '1') {\n            for (let i = 0; i < this.state.project2Files.length; ++i) {\n                // if project 2 file at i is other file specified in instance\n                // get filename and code from instance and break\n                if (this.state.project2Files[i].fileName === otherFile) {\n                    window2 = this.state.project2Files[i].code;\n                    window2FileName = this.state.project2Files[i].fileName;\n                    break;\n                }\n            }\n        } else {\n            for (let i = 0; i < this.state.project1Files.length; ++i) {\n                // if project 1 file at is is other file specified in instance\n                // get filename and code from instance and break\n                if (this.state.project1Files[i].fileName === otherFile) {\n                    window2 = this.state.project1Files[i].code;\n                    window2FileName = this.state.project1Files[i].fileName;\n                    break;\n                }\n            }\n        }\n\n        // set information to display code and filename for primary file and\n        // corresponding file\n        // set instance row index to appropriately color selected instnace\n        this.setState({\n            content: 'Detailed',\n            window1File: window1,\n            window1FileName: window1FileName,\n            window2File: window2,\n            window2FileName: window2FileName,\n            instance: instance.originalInstance,\n            instanceRow: rowIndex\n        })\n    }\n\n    /**\n     * Determine whether or not the current line is part of an instance of plagiarism. \n     * Used to highlight instances of plagiarism.\n     * \n     * @param record the code info instance at the given index\n     * @param index the line number of the code info instance\n     */\n    getRowColor(record: CodeInfo, index: number) : boolean {\n        // get the instance of plagiarism being displayed\n        let instance = this.state.instance;\n        // if the given row falls within the instance of plagiarism for the file\n        // displayed in the window, return true, otherwise return false\n        if (record.fileName === instance.fileName1) {\n            return index >= instance.lines1Start - 1 && index <= instance.lines1End - 1;\n        } else {\n            return index >= instance.lines2Start - 1 && index <= instance.lines2End - 1;\n        }\n    }\n\n    /**\n     * Determine whether or not the given line corresponds to the given index.\n     * \n     * @param rowIndex the index of the row being evaluated\n     * @param selectedIndex the index of the row that is being looked for\n     */\n    getEntryColor(rowIndex: number, selectedIndex: number) : boolean {\n        return rowIndex === selectedIndex;\n    }\n\n    /**\n     * Get the FileName for the project displayed in a Code window.\n     * \n     * @param isProject1 whether or not the project file being displayed is for the\n     *                   file displayed in window 1\n     */\n    getFileName(isProject1: boolean) : string {\n        // if the the file name for a file in the window is not null, return the\n        // filename -- otherwise, return generic \"file#\" to be displayed until a\n        // file is chosen\n        if (isProject1) {\n            if (this.state.window1FileName != null) {\n                return this.state.window1FileName;\n            } else {\n                return \"file1\";\n            }\n        } else {\n            if (this.state.window2FileName != null) {\n                return this.state.window2FileName;\n            } else {\n                return \"file2\";\n            }\n        }\n    }\n\n     /**\n     * Generates a report for the results of the plagiarism comparison as a string.\n     * Formats the data to be stored in Firebase under logged in account.\n     */\n    generateReport() : Object {\n\n        let reportString: string = \"\"\n\n        // set percentage\n        reportString += \"Project files were \" + this.state.score + \"% similar.\\n\\n\"\n\n        // set number of instances\n        reportString += this.state.totalInstances + \" instances of plagiarism were detected.\\n\\n\"\n\n        // list files for project 1\n        reportString += \"Project 1 Files:\\n\";\n        let p1Files = this.state.project1Files;\n        for (let i = 0; i < p1Files.length; ++i) {\n            reportString += \"\\t- \" + p1Files[i].fileName + \"\\n\";\n        }\n\n        reportString += \"\\n\"\n\n        // list files for project 2\n        reportString += \"Project 2 Files:\\n\";\n        let p2Files = this.state.project2Files;\n        for (let i = 0; i < p2Files.length; ++i) {\n            reportString += \"\\t- \" + p2Files[i].fileName + \"\\n\";\n        }\n\n        reportString += \"\\n\"\n\n        // detail instances\n        reportString += \"Instances:\\n\"\n\n        let instances: Array<InstanceInfo> = this.state.instanceInfo;\n\n        // collect instances such that filename and lines of plagiarism are recorded\n        for (let i = 0; i < instances.length; ++i) {\n            let file1String = instances[i].fileName1 + \" lines \" + instances[i].lines1;\n            let file2String = instances[i].fileName2 + \" lines \" + instances[i].lines2;\n            reportString += \"\\t- \" + file1String + \" : \" + file2String + \"\\n\";\n        }\n\n        // return report string as 'data' in object\n        return {\n            data: reportString\n        }\n    }\n\n    /**\n     * Saves a report of the results from the plagiarism comparison to the logged \n     * in account in Firebase as a string.\n     */\n    saveReport(): void {\n\n        let reportData = this.generateReport();\n        db.collection('users')\n            .doc(this.props.email+this.props.password)\n            .collection('reports')\n            .doc('report'+this.props.reports)\n            .set(reportData)\n        const user={\n            uid:this.props.email,\n            up:this.props.password,\n            reports: (this.props.reports+1)\n        }\n        db.collection('users').doc(user.uid+user.up).set(user)\n        this.props.setReportNumber(this.props.reports + 1)\n    }\n\n    /**\n     * Scroll to the first line in an instance of plagiarism in code window 1 and 2.\n     */\n    handleScroll = () => {\n        // scroll plagiarism instance for window 1 into view\n        scrollIntoView(document.querySelector('.row-selected-a') as HTMLElement, {\n            align: {\n            top: 0,\n            },\n        });\n\n        // scroll plagiarism instance for window 2 into view\n        scrollIntoView(document.querySelector('.row-selected-b') as HTMLElement, {\n            align: {\n            top: 0,\n            },\n        });\n    }\n\n    /**\n     * Calls methods to be performed after a component in Comparison updates.\n     */\n    componentDidUpdate() {\n        this.handleScroll();\n    }\n\n        /**\n     * Sets the detailed layout for the Comparison page with code windows and\n     * specific instances of plagiarism.\n     */\n    handleDetailed() {\n        this.setState({\n            content: 'Detailed'\n        })\n    }\n\n    /**\n     * Sets the overview layout for the Comparison page with the overall results\n     * of the plagiarism comparison.\n     */\n    handleOverview() {\n        this.setState({\n            content: 'Overview',\n            selectedFile: null,\n            instances: null,\n            window1File: null,\n            window1FileName: null,\n            window2File: null,\n            window2FileName: null,\n            fileRow: -1,\n            instanceRow: -1\n        })\n    }\n\n    /**\n     * Displays the content in the middle-left side of the screen (code window or plagiarism\n     * overview).\n     */\n    displayMainContent() {\n        let content = this.state.content;\n        switch(content) {\n            // if Overview, create Overview object\n            case 'Overview':\n                return this.displayOverview();\n            // if Detailed, created object with code from files in code windows\n            case 'Detailed':\n                return this.displayCodeWindows();\n        }\n    }\n\n    /**\n     * Displays code in windows to view instances of plagiarism.\n     */\n    displayCodeWindows() : JSX.Element {\n        return <>\n            <Col span={9} style={{ paddingRight: '1%' }} className='col-style'>\n                <>\n                    {/* Code window 1 - show selected file */}\n                    <Title style={{ fontSize: 25, marginBottom: 0, paddingLeft: 15, border: '2px solid black' }}>\n                        {this.getFileName(true)}\n                    </Title>\n                    <Table<CodeInfo>\n                        showHeader={false}\n                        columns={this.codeColumns}\n                        dataSource={this.state.window1File}\n                        pagination={false}\n                        scroll={{ y: 100, x: 100 }}\n                        bordered={false}\n                        style={{ width: '100%', height: 728, background: 'white', border: '2px solid black' }}\n                        className='code-table'\n                        rowClassName={(record, index) => (\n                            this.getRowColor(record, index) ? \"row-selected-a\" : \"row-unselected\"\n                        )}\n                    >\n                        <Table.Column<CodeInfo> key='line' title='code' />\n                    </Table>\n                </>\n            </Col>\n            <Col span={9} className='col-style'>\n                <>\n                    {/* code window 2 - shows corresponding file with plagiarism */}\n                    <Title style={{ fontSize: 25, marginBottom: 0, paddingLeft: 15, border: '2px solid black' }}>\n                        {this.getFileName(false)}\n                    </Title>\n                    <Table<CodeInfo>\n                        showHeader={false}\n                        columns={this.codeColumns}\n                        dataSource={this.state.window2File}\n                        pagination={false}\n                        scroll={{ y: 100, x: 100 }}\n                        bordered={false}\n                        style={{ width: '100%', height: 728, background: 'white', border: '2px solid black' }}\n                        className='code-table'\n                        rowClassName={(record, index) => (\n                            this.getRowColor(record, index) ? \"row-selected-b\" : \"row-unselected\"\n                        )}\n                    >\n                        <Table.Column<CodeInfo> key='line' title='code' />\n                    </Table>\n                </>\n            </Col></>\n    }\n\n    /**\n     * Displays an overview of results for the plagiarism comparison.\n     */\n    displayOverview() : JSX.Element {\n        return <>\n        <Col span={10} style={{margin:200}}>\n            <Row style={{width:650, paddingTop:150, height:200, textAlign:'center', backgroundColor:'#d41b2e'}}>\n                    <Title style={{color:'white', width:'inherit'}}>{this.state.score}% Similar</Title>\n            </Row>\n            <Row style={{width:650, height:200, textAlign:'center', backgroundColor:'#d41b2e'}}>\n                <Title style={{color:'white', width:'inherit'}}>\n                    {this.state.totalInstances} Instances of Plagiarism Detected\n                </Title>\n            </Row>\n        </Col>\n        </>\n    }\n\n    /**\n     * Formats the \"Save\" button displayed on screen. If a user is logged in, is\n     * interactable. Otherwise, the button is disabled.\n     */\n    getSaveButton() {\n        if (this.props.loggedin) {\n            return <Button\n                style={{fontSize:12}} \n                onClick={this.saveReport.bind(this)} className='detail-button'\n            >\n                Save\n            </Button>\n        } else{\n            return <Button\n                style={{fontSize:12}} \n                disabled={true} className='detail-button'\n            >\n                Save\n            </Button>\n        }\n    }\n    \n    render() {\n        return <><Row style={{paddingTop:25, paddingRight:10, width:'inherit', overflow:'clip'}}>\n            <Col span={5} style={{padding:10 , paddingTop:0}} className='col-style'>\n                <Row \n                    align='middle' \n                    justify='center' \n                    style={{width:'inherit', height:50, background:\"white\", border:\"2px solid black\"}}>\n                    <Button \n                        style={{fontSize: 12}} \n                        className='detail-button' onClick={this.handleOverview.bind(this)}\n                    >\n                            Overview\n                    </Button>\n                    <Button\n                        style={{fontSize: 12}} \n                        className='detail-button' onClick={this.handleDetailed.bind(this)}\n                    >\n                        Detailed\n                    </Button>\n                    {this.getSaveButton()}\n                </Row>\n                <Row \n                    justify='start' \n                    align='middle' \n                    style={{\n                        marginTop:5, width:'inherit', \n                        height:33, \n                        background:\"white\", \n                        border:\"2px solid black\",\n                        textOverflow:'ellipsis',\n                        overflow:'hidden'    \n                    }}\n                >\n                    <Title style={{paddingLeft:10, fontSize:20}}>Project Files</Title>\n                </Row>\n                <Row \n                    justify='start' \n                    style={{width:'inherit', \n                        height:40, \n                        background:\"white\", \n                        border:\"2px solid black\",\n                        borderTop: 0,\n                        borderBottom: 0,\n                        borderSpacing:0\n                    }}\n                >\n                    <Button \n                        style={{height:'100%', width:'33%', textOverflow:'ellipsis', overflow:'hidden'}}\n                        onClick={() => this.displayFiles('1')}\n                    >\n                        Project 1\n                    </Button>\n                    <Button \n                        style={{height:'100%', width:'33%', textOverflow:'ellipsis', overflow:'hidden'}}\n                        onClick={() => this.displayFiles('2')}\n                    >\n                        Project 2\n                    </Button>\n                </Row>\n                <Row\n                    style={{height:291}}\n                >\n                    <Table<FileInfo>\n                        showHeader={false}\n                        columns={this.fileColumns}\n                        dataSource={this.state.selectedFiles}\n                        pagination={false}\n                        scroll={{y:200}}\n                        bordered={true}\n                        style={{width:'100%', height:'100%', background:'white', border:'2px solid black'}}\n                        onRow={(record, rowIndex) => { return {\n                            onClick: (event: any) => {\n                                // bind the call to instance here\n                                if(typeof rowIndex === 'number') {\n                                    this.displayInstances(record, rowIndex);\n                                }\n                            }};\n                        }}\n                        className='file-table'\n                        rowClassName={(record, index) => ( \n                            this.getEntryColor(index, this.state.fileRow) ? \"entry-selected\" : \"entry-unselected\" \n                        )}\n                        >\n                            <Table.Column<FileInfo> key='fileName' title='lines'/>\n                    </Table>\n                </Row>\n                <Row \n                    justify='start' \n                    align='middle' \n                    style={{marginTop:5, width:'inherit', height:30, background:\"white\", border:\"2px solid black\"}}>\n                    <Title style={{paddingLeft: 10, fontSize:20}}>Instances</Title>\n                </Row>\n                <Row style={{marginTop:0, height:309}}>\n                    <>\n                    <Table<DisplayInstance>\n                        columns={this.instanceColumns}\n                        dataSource={this.state.instances}\n                        pagination={false}\n                        scroll={{y:200}}\n                        bordered={true}\n                        style={{width:'100%', height:'100%', background:'white', border:'2px solid black'}}\n                        onRow={(record, rowIndex) => { return {\n                            onClick: (event: any) => {\n                                // bind the call to instance here\n                                if(typeof rowIndex === 'number') {\n                                    this.displayFile(record, rowIndex);\n                                }\n                            }};\n                        }}\n                        className='instance-table'\n                        rowClassName={(record, index) => ( \n                            this.getEntryColor(index, this.state.instanceRow) ? \"entry-selected\" : \"entry-unselected\" \n                        )}\n                        >\n                            <Table.Column<DisplayInstance> key='fileName' title='lines'/>\n                    </Table>\n                    </>\n                </Row>\n            </Col>\n            {this.displayMainContent()}\n        </Row>\n        </>\n    }\n\n}"]},"metadata":{},"sourceType":"module"}