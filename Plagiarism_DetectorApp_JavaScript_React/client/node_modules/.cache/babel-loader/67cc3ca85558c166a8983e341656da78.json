{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aidasharifrohani/Desktop/Final_submission/client/src/FileUploader.tsx\";\nimport axios from 'axios';\nimport { Input, Form, Layout, Row, Col, Button, Card, List } from 'antd';\nimport React from 'react';\nimport Title from 'antd/lib/typography/Title';\nimport { CloseOutlined } from '@ant-design/icons';\nimport './FileUploader.css';\nconst {\n  Content\n} = Layout;\n/**\n * Contains the name of the file and the built-in javascript file type.\n */\n\n/**\n * Describes the File Upload page where a user can enter files to be compared.\n */\nexport default class FileUploader extends React.Component {\n  /**\n   * Creates an instance of the FileUploader component. Clears any existing project\n   * files from corresponding server.\n   * \n   * @param props values passed down from parent component\n   */\n  constructor(props) {\n    super(props);\n\n    this.onFileChangeProject1 = event => {\n      // get files uploaded into input=file\n      let files = event.target.files; // create array to store files\n\n      let pFiles = [];\n\n      for (let i = 0; i < files.length; ++i) {\n        // use information from file in array of files to create Project File\n        // object\n        let curr = {\n          project: '1',\n          title: files[i].name,\n          file: files[i]\n        }; // add project file to pFiles array\n\n        pFiles.push(curr);\n      } // add all instances of project files to File Upload component state\n\n\n      this.setState({\n        project1Files: this.state.project1Files.concat(pFiles)\n      });\n    };\n\n    this.onFileChangeProject2 = event => {\n      // get files uploaded to input=file\n      let files = event.target.files; // create array to store ProjectFiles\n\n      let pFiles = [];\n\n      for (let i = 0; i < files.length; ++i) {\n        // use information from file in array to creat Project File\n        let curr = {\n          project: '2',\n          title: files[i].name,\n          file: files[i]\n        }; // add Project File object to array\n\n        pFiles.push(curr);\n      } // add all instance of project files to File Uppload component state\n\n\n      this.setState({\n        project2Files: this.state.project2Files.concat(pFiles)\n      });\n    };\n\n    this.state = {\n      // collection of ProjectFile[] for project 1\n      project1Files: [],\n      // collection of ProjectFile[] for project 2\n      project2Files: [],\n      // waiting for server response\n      loading: false,\n      // error from status (if there is one)\n      errorStatus: null\n    }; // clear all existing files in corresponding server-- creates clean slate\n    // for project\n\n    this.deleteServerFiles();\n  }\n  /**\n   * Handles adding files for project 1 to the current instance of File Uploader.\n   * \n   * @param event contains information about environment at time of function call.\n   */\n\n\n  /**\n   * Remove a Project File from project 1.\n   * \n   * @param item file to be removed from project 1\n   */\n  deleteProjectFile(item, project) {\n    // if the file belongs to project 1, filter out of project 1\n    if (project === '1') {\n      this.setState({\n        project1Files: this.state.project1Files.filter(i => i.title !== item.title)\n      });\n    } // else, filter the file out of project 2\n    else {\n        this.setState({\n          project2Files: this.state.project2Files.filter(i => i.title !== item.title)\n        });\n      }\n  }\n  /**\n   * Render information about a Project File to the project 1 card on screen.\n   * \n   * @param item Project File object to be rendered.\n   */\n\n\n  renderProjectItem(item) {\n    // render the item for the given list\n    return /*#__PURE__*/_jsxDEV(List.Item, {\n      // pass the project in the file to deleteProjectFile\n      actions: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.deleteProjectFile.bind(this, item, item.project),\n        icon: /*#__PURE__*/_jsxDEV(CloseOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 23\n      }, this)],\n      children: item.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 16\n    }, this);\n  }\n  /**\n   * Creates a FormData object that formats files to be sent to server via axios.\n   * \n   * @param projectFiles project files to be collected and formatted\n   */\n\n\n  populateFormData(projectFiles) {\n    // Create a form data object to hold files in project 1\n    let formData = new FormData(); // add all files for project 1 to instance of form data\n\n    for (let i = 0; i < projectFiles.length; ++i) {\n      // format file for transmission\n      formData.append(\"file\" + i, projectFiles[i].file);\n    }\n\n    return formData;\n  }\n  /**\n   * Creates an EvalFile array from file array returned from the server.\n   * \n   * @param evalFiles files returned from server\n   */\n\n\n  populateProjectFiles(evalFiles) {\n    // create array to store formatted files\n    let projectFiles = []; // iterate through files returned from server\n\n    for (let key in evalFiles) {\n      // append project files from server to eval file array\n      projectFiles.push({\n        fileName: evalFiles[key].fileName,\n        code: evalFiles[key].contents\n      });\n    }\n\n    return projectFiles;\n  }\n  /**\n   * Sends information regarding uploaded files for projects 1 and 2 to the server\n   * and evaluates responses from the server. Takes information from the server, parses\n   * data, and formats data for display.\n   */\n\n\n  async compareProject() {\n    // set loading state to be true while upload and comparison is being done\n    this.setState({\n      loading: true\n    });\n    const formData1 = this.populateFormData(this.state.project1Files);\n    const formData2 = this.populateFormData(this.state.project2Files); // send files for project 1 and 2 and wait for response from the server\n\n    let data1 = await this.sendProject('project1', formData1);\n    let data2 = await this.sendProject('project2', formData2); // if invalid project files for project 1, update loading and inform\n    // component of error status -- return and wait for user to correct\n    // files based on error message\n\n    if (!this.evaluateSendResponse(data1) || !this.evaluateSendResponse(data2)) {\n      return;\n    } //upon good response for both project1 and project2 uploads, get files from\n    // server for projects 1 and 2\n\n\n    let project1EvalFiles = await this.getProjectFiles('project1');\n    let project2EvalFiles = await this.getProjectFiles('project2'); // parse data returned from the server and create Eval Files to store information\n    // about project 1\n\n    let project1Files = this.populateProjectFiles(project1EvalFiles); // parse data returned from the server and create Eval Files to store information\n    // about project 2\n\n    let project2Files = this.populateProjectFiles(project2EvalFiles); // Results of comparison - JSON object corresponds to ProjectComparator in server\n\n    let comparison = await this.getComparison(); // if the comparison is an error, delete files from server, set state\n\n    if (comparison === 'Comparison Error') {\n      this.deleteServerFiles(); // set loading to false, set error message to be displayed on screen\n\n      this.setState({\n        loading: false,\n        errorStatus: 'Error comparing files - Check Javascript Syntax in Files'\n      }); // return out of function to terminate execution\n\n      return;\n    } // iterate through instances of plagiarism from server\n\n\n    let serverInstances = comparison.plagiarismCaseArray; // create array of instances to hold formatted plagiarism instances\n\n    let instances = [];\n\n    for (let key in serverInstances) {\n      // format data in instance from server\n      // append to instances\n      instances.push({\n        fileName1: serverInstances[key].filename1,\n        fileName2: serverInstances[key].filename2,\n        lines1Start: parseInt(serverInstances[key].file1StartLine),\n        lines1End: parseInt(serverInstances[key].file1EndLine),\n        lines2Start: parseInt(serverInstances[key].file2StartLine),\n        lines2End: parseInt(serverInstances[key].file2EndLine)\n      });\n    } // get score from comparison results\n\n\n    let score = comparison.plagiarismScore; // set error status to null and loading state to false\n\n    this.setState({\n      loading: false,\n      errorStatus: null\n    }); // set project files and instances of plagiarism in parent component to\n    // be passed to Comparison component\n\n    this.props.setProjectFiles(project1Files, project2Files, instances, score); // inform parent component that Comparison results are ready to be\n    // displayed\n\n    this.props.displayComparison();\n  }\n  /**\n   * Deletes files for project on server.\n   */\n\n\n  deleteServerFiles() {\n    axios.delete('http://localhost:3001/file/all').catch(error => {\n      this.errorCatcher(error);\n    });\n  }\n  /**\n   * Send project files to the server.\n   * \n   * @param projectURI the uri of the project where files should be uploaded\n   * @param formData files and filenames of project being uploaded\n   */\n\n\n  async sendProject(projectURI, formData) {\n    // create uri string corresponding to host\n    let uri = 'http://localhost:3001/file/' + projectURI; // put files in appropriate resource at server\n\n    return axios.put(uri, formData).then(res => {\n      // return successful response\n      return res.data;\n    }).catch(error => {\n      return this.errorCatcher(error);\n    });\n  }\n  /**\n   * Evaluate the response sent from the server for errors. Return true for good response, false for bad \n   * response.\n   * \n   * @param data response from server\n   */\n\n\n  evaluateSendResponse(data) {\n    // if the returned response does not indicate good file upload, \n    // set state to false, remove all uploaded files at server\n    if (data !== \"Files uploaded successfully\") {\n      this.setState({\n        loading: false,\n        errorStatus: data\n      });\n      axios.delete('http://localhost:3001/file/all');\n      return false;\n    } else {\n      return true;\n    }\n  }\n  /**\n   * Request instances of plagiarism between two projects from the server.\n   */\n\n\n  async getComparison() {\n    return axios.get('http://localhost:3001/comparison/').then(res => {\n      return res.data;\n    }).catch(error => {\n      return this.errorCatcher(error, 'Comparison Error');\n    });\n  }\n  /**\n   * Get project files from a given resource for a project.\n   * \n   * @param projectURI project whose files should be get-ed\n   */\n\n\n  async getProjectFiles(projectURI) {\n    // create uri string for appropriate project resource\n    let uri = 'http://localhost:3001/file/' + projectURI; // get files from server\n\n    return axios.get(uri).then(res => {\n      return res.data;\n    }).catch(error => {\n      this.errorCatcher(error);\n    });\n  }\n  /**\n   * Handles errors returned by axios calls. Handles network connection errors.\n   * \n   * @param error the error to be checked\n   * @param returnString the string to be returned if error is not a network connection error\n   */\n\n\n  errorCatcher(error, returnString) {\n    // if the error is a network connection error, return message indicating server error\n    if (error.toString() === 'Error: Network Error') {\n      this.setState({\n        loading: false,\n        errorStatus: \"Server cannot be reached\"\n      });\n      return \"Server cannot be reached\";\n    } // else return information about error during file upload for project\n    else {\n        // if return string is not defined, return response in error\n        if (returnString === undefined) {\n          return error.response.data;\n        } else {\n          // otherwise, return specified return string\n          return returnString;\n        }\n      }\n  }\n  /**\n   * Display error returned from server when attempting to upload files\n   * for either project.\n   */\n\n\n  displayFileUploadError() {\n    if (this.state.errorStatus != null) {\n      return /*#__PURE__*/_jsxDEV(Title, {\n        style: {\n          fontSize: 14,\n          color: '#d41b2e'\n        },\n        children: this.state.errorStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        style: {\n          textAlign: 'center',\n          marginTop: 100\n        },\n        children: \"Select Files To Begin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Title, {\n        style: {\n          textAlign: 'center',\n          margin: 0,\n          padding: 0,\n          fontSize: 14\n        },\n        children: \"(Files must be Javascript - .js)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        justify: \"center\",\n        style: {\n          marginTop: 20,\n          height: 500,\n          padding: 50,\n          paddingBottom: 25\n        },\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          span: 8,\n          style: {\n            marginRight: 50\n          },\n          children: [/*#__PURE__*/_jsxDEV(Card, {\n            title: \"Project 1\",\n            className: \"file-card\",\n            children: /*#__PURE__*/_jsxDEV(List, {\n              dataSource: this.state.project1Files,\n              renderItem: this.renderProjectItem.bind(this),\n              className: \"file-list\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            className: \"button-row\",\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              type: \"file\",\n              multiple: true,\n              onChange: this.onFileChangeProject1.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          span: 8,\n          style: {\n            marginLeft: 50\n          },\n          children: [/*#__PURE__*/_jsxDEV(Card, {\n            title: \"Project 2\",\n            className: \"file-card\",\n            children: /*#__PURE__*/_jsxDEV(List, {\n              dataSource: this.state.project2Files,\n              renderItem: this.renderProjectItem.bind(this),\n              className: \"file-list\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            className: \"button-row\",\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              type: \"file\",\n              multiple: true,\n              onChange: this.onFileChangeProject2.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            width: 200,\n            color: 'white',\n            background: '#d41b2e',\n            borderColor: 'black'\n          },\n          onClick: this.compareProject.bind(this),\n          loading: this.state.loading,\n          children: \"Compare Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        justify: \"center\",\n        style: {\n          margin: 15\n        },\n        children: this.displayFileUploadError()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 16\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/aidasharifrohani/Desktop/Final_submission/client/src/FileUploader.tsx"],"names":["axios","Input","Form","Layout","Row","Col","Button","Card","List","React","Title","CloseOutlined","Content","FileUploader","Component","constructor","props","onFileChangeProject1","event","files","target","pFiles","i","length","curr","project","title","name","file","push","setState","project1Files","state","concat","onFileChangeProject2","project2Files","loading","errorStatus","deleteServerFiles","deleteProjectFile","item","filter","renderProjectItem","bind","populateFormData","projectFiles","formData","FormData","append","populateProjectFiles","evalFiles","key","fileName","code","contents","compareProject","formData1","formData2","data1","sendProject","data2","evaluateSendResponse","project1EvalFiles","getProjectFiles","project2EvalFiles","comparison","getComparison","serverInstances","plagiarismCaseArray","instances","fileName1","filename1","fileName2","filename2","lines1Start","parseInt","file1StartLine","lines1End","file1EndLine","lines2Start","file2StartLine","lines2End","file2EndLine","score","plagiarismScore","setProjectFiles","displayComparison","delete","catch","error","errorCatcher","projectURI","uri","put","then","res","data","get","returnString","toString","undefined","response","displayFileUploadError","fontSize","color","render","textAlign","marginTop","margin","padding","height","paddingBottom","marginRight","marginLeft","width","background","borderColor"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { Input, Form, Layout, Row, Col, Button, Card, List } from 'antd';\nimport React from 'react';\nimport Title from 'antd/lib/typography/Title';\nimport { CloseOutlined } from '@ant-design/icons';\nimport './FileUploader.css';\n\nconst { Content } = Layout\n\n/**\n * Contains the name of the file and the built-in javascript file type.\n */\ninterface ProjectFile {\n    project: string,\n    title: string;\n    file: any;\n}\n\n/**\n * Contains information about a file returned from the server.\n */\ninterface EvalFile {\n    fileName: string;\n    code: string;\n}\n\n/**\n * Contains information about instances of plagiarism returned from the server.\n */\ninterface Instance {\n    fileName1: string,\n    lines1Start: number,\n    lines1End: number,\n    fileName2: string,\n    lines2Start: number,\n    lines2End: number,\n}\n\n/**\n * Describes the File Upload page where a user can enter files to be compared.\n */\nexport default class FileUploader extends React.Component<any, any> {\n\n    /**\n     * Creates an instance of the FileUploader component. Clears any existing project\n     * files from corresponding server.\n     * \n     * @param props values passed down from parent component\n     */\n    constructor(props: {}) {\n        super(props);\n        this.state ={\n            // collection of ProjectFile[] for project 1\n            project1Files: [],\n            // collection of ProjectFile[] for project 2\n            project2Files: [],\n            // waiting for server response\n            loading: false,\n            // error from status (if there is one)\n            errorStatus: null\n        }\n\n        // clear all existing files in corresponding server-- creates clean slate\n        // for project\n        this.deleteServerFiles();\n    }\n\n    /**\n     * Handles adding files for project 1 to the current instance of File Uploader.\n     * \n     * @param event contains information about environment at time of function call.\n     */\n    onFileChangeProject1 = (event: any) => {\n        // get files uploaded into input=file\n        let files = event.target.files;\n        // create array to store files\n        let pFiles: ProjectFile[] = [];\n        for (let i = 0; i < files.length; ++i) {\n            // use information from file in array of files to create Project File\n            // object\n            let curr: ProjectFile = {project: '1', title: files[i].name, file: files[i]}\n            // add project file to pFiles array\n            pFiles.push(curr);\n        }\n        \n        // add all instances of project files to File Upload component state\n        this.setState({ \n            project1Files: this.state.project1Files.concat(pFiles),\n        })\n    }\n\n    /**\n     * Handles adding files for project 2 to the current instance of File Uploader.\n     * \n     * @param event contains information about environment at time of function call.\n     */\n    onFileChangeProject2 = (event: any) => {\n        // get files uploaded to input=file\n        let files = event.target.files;\n        // create array to store ProjectFiles\n        let pFiles: ProjectFile[] = [];\n        for (let i = 0; i < files.length; ++i) {\n            // use information from file in array to creat Project File\n            let curr = {project: '2', title: files[i].name, file: files[i]}\n            // add Project File object to array\n            pFiles.push(curr);\n        }\n\n        // add all instance of project files to File Uppload component state\n        this.setState({ \n            project2Files: this.state.project2Files.concat(pFiles),\n        })\n    }\n\n    /**\n     * Remove a Project File from project 1.\n     * \n     * @param item file to be removed from project 1\n     */\n    deleteProjectFile(item: ProjectFile, project: string) : void {\n        // if the file belongs to project 1, filter out of project 1\n        if (project === '1') {\n            this.setState({\n                project1Files: this.state.project1Files.filter((i: { title: string; }) => i.title !== item.title)\n            })\n        } \n        // else, filter the file out of project 2\n        else {\n            this.setState({\n                project2Files: this.state.project2Files.filter((i: { title: string; }) => i.title !== item.title)\n            })\n        }\n    }\n\n    /**\n     * Render information about a Project File to the project 1 card on screen.\n     * \n     * @param item Project File object to be rendered.\n     */\n    renderProjectItem(item: ProjectFile) : JSX.Element {\n        // render the item for the given list\n        return <List.Item \n            // pass the project in the file to deleteProjectFile\n            actions={[<Button onClick={this.deleteProjectFile.bind(this, item, item.project)} \n            icon={<CloseOutlined />} \n        />]}>\n            {item.title}\n        </List.Item>\n    }\n\n    /**\n     * Creates a FormData object that formats files to be sent to server via axios.\n     * \n     * @param projectFiles project files to be collected and formatted\n     */\n    populateFormData(projectFiles: ProjectFile[]) : FormData {\n        // Create a form data object to hold files in project 1\n        let formData = new FormData(); \n\n        // add all files for project 1 to instance of form data\n        for (let i = 0; i < projectFiles.length; ++i) {\n            // format file for transmission\n            formData.append( \n                \"file\" + i, \n                projectFiles[i].file\n            ); \n        }\n\n        return formData;\n    }\n\n    /**\n     * Creates an EvalFile array from file array returned from the server.\n     * \n     * @param evalFiles files returned from server\n     */\n    populateProjectFiles(evalFiles: any) : EvalFile[] {\n        // create array to store formatted files\n        let projectFiles: EvalFile[] = [];\n        // iterate through files returned from server\n        for (let key in evalFiles) {\n            // append project files from server to eval file array\n            projectFiles.push({ \n                fileName: evalFiles[key].fileName,\n                code: evalFiles[key].contents\n            })\n        }\n\n        return projectFiles;\n    }\n\n    /**\n     * Sends information regarding uploaded files for projects 1 and 2 to the server\n     * and evaluates responses from the server. Takes information from the server, parses\n     * data, and formats data for display.\n     */\n    async compareProject() : Promise<void> {\n        // set loading state to be true while upload and comparison is being done\n        this.setState({loading:true});     \n\n        const formData1 = this.populateFormData(this.state.project1Files);\n        const formData2 = this.populateFormData(this.state.project2Files);\n    \n        // send files for project 1 and 2 and wait for response from the server\n        let data1 = await this.sendProject('project1', formData1);\n        let data2 = await this.sendProject('project2', formData2);\n        // if invalid project files for project 1, update loading and inform\n        // component of error status -- return and wait for user to correct\n        // files based on error message\n        if (!this.evaluateSendResponse(data1) || !this.evaluateSendResponse(data2)) {\n            return;\n        }\n\n        //upon good response for both project1 and project2 uploads, get files from\n        // server for projects 1 and 2\n        let project1EvalFiles = await this.getProjectFiles('project1');\n        let project2EvalFiles = await this.getProjectFiles('project2');\n\n        // parse data returned from the server and create Eval Files to store information\n        // about project 1\n        let project1Files = this.populateProjectFiles(project1EvalFiles);\n        // parse data returned from the server and create Eval Files to store information\n        // about project 2\n        let project2Files = this.populateProjectFiles(project2EvalFiles);\n\n        // Results of comparison - JSON object corresponds to ProjectComparator in server\n        let comparison = await this.getComparison();\n\n        // if the comparison is an error, delete files from server, set state\n        if (comparison === 'Comparison Error') {\n            this.deleteServerFiles();\n\n            // set loading to false, set error message to be displayed on screen\n            this.setState({\n                loading: false,\n                errorStatus: 'Error comparing files - Check Javascript Syntax in Files'\n            });\n            // return out of function to terminate execution\n            return;\n        }\n\n        // iterate through instances of plagiarism from server\n        let serverInstances = comparison.plagiarismCaseArray;\n\n        // create array of instances to hold formatted plagiarism instances\n        let instances: Instance[] = [];\n        for(let key in serverInstances) {\n            // format data in instance from server\n            // append to instances\n            instances.push({\n                fileName1: serverInstances[key].filename1,\n                fileName2: serverInstances[key].filename2,\n                lines1Start: parseInt(serverInstances[key].file1StartLine),\n                lines1End: parseInt(serverInstances[key].file1EndLine),\n                lines2Start: parseInt(serverInstances[key].file2StartLine),\n                lines2End: parseInt(serverInstances[key].file2EndLine)\n            })\n        }\n\n        // get score from comparison results\n        let score = comparison.plagiarismScore;\n\n        // set error status to null and loading state to false\n        this.setState({\n            loading:false,\n            errorStatus: null\n        });   \n\n        // set project files and instances of plagiarism in parent component to\n        // be passed to Comparison component\n        this.props.setProjectFiles(project1Files, project2Files, instances, score)\n\n        // inform parent component that Comparison results are ready to be\n        // displayed\n        this.props.displayComparison();\n    }\n\n    /**\n     * Deletes files for project on server.\n     */\n    deleteServerFiles() : void {\n        axios.delete('http://localhost:3001/file/all').catch((error) => {\n            this.errorCatcher(error);\n        });\n    }\n\n    /**\n     * Send project files to the server.\n     * \n     * @param projectURI the uri of the project where files should be uploaded\n     * @param formData files and filenames of project being uploaded\n     */\n    async sendProject(projectURI: string, formData: FormData): Promise<any> {\n        // create uri string corresponding to host\n        let uri = 'http://localhost:3001/file/' + projectURI;\n        // put files in appropriate resource at server\n        return axios.put(uri, formData).then((res) => {\n            // return successful response\n            return res.data;\n        }).catch((error) => {\n            return this.errorCatcher(error)\n        });\n    }\n\n    /**\n     * Evaluate the response sent from the server for errors. Return true for good response, false for bad \n     * response.\n     * \n     * @param data response from server\n     */\n    evaluateSendResponse(data: any) : boolean {\n        // if the returned response does not indicate good file upload, \n        // set state to false, remove all uploaded files at server\n        if (data !== \"Files uploaded successfully\") {\n            this.setState({\n                loading:false,\n                errorStatus: data\n            });\n            axios.delete('http://localhost:3001/file/all');\n            return false; \n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Request instances of plagiarism between two projects from the server.\n     */\n    async getComparison() : Promise<any> {\n        return axios.get('http://localhost:3001/comparison/').then((res) => {\n            return res.data;\n        }).catch((error) => {\n            return this.errorCatcher(error, 'Comparison Error');\n        })\n    }\n\n    /**\n     * Get project files from a given resource for a project.\n     * \n     * @param projectURI project whose files should be get-ed\n     */\n    async getProjectFiles(projectURI: string) : Promise<any> {\n        // create uri string for appropriate project resource\n        let uri = 'http://localhost:3001/file/' + projectURI;\n        // get files from server\n        return axios.get(uri).then((res) => {\n            return res.data;\n        }).catch((error) => {\n            this.errorCatcher(error);\n        })\n    }\n\n    /**\n     * Handles errors returned by axios calls. Handles network connection errors.\n     * \n     * @param error the error to be checked\n     * @param returnString the string to be returned if error is not a network connection error\n     */\n    errorCatcher(error: any, returnString?: string) : string {\n        // if the error is a network connection error, return message indicating server error\n        if (error.toString() === 'Error: Network Error') {\n            this.setState({ loading: false, errorStatus: \"Server cannot be reached\" })\n            return \"Server cannot be reached\";\n        } \n        // else return information about error during file upload for project\n        else {\n            // if return string is not defined, return response in error\n            if (returnString === undefined) {\n                return error.response.data;\n            } else {\n                // otherwise, return specified return string\n                return returnString;\n            }\n        }\n    }\n\n    /**\n     * Display error returned from server when attempting to upload files\n     * for either project.\n     */\n    displayFileUploadError() : any {\n        if (this.state.errorStatus != null) {\n            return <Title style={{fontSize:14, color:'#d41b2e'}}>\n                {this.state.errorStatus}\n            </Title>\n        }\n    }\n\n    render() {\n        return <Content>\n        <Title style={{ textAlign:'center', marginTop:100}}>\n            Select Files To Begin\n        </Title>\n        <Title style={{ textAlign:'center', margin:0, padding:0, fontSize:14}}>\n            (Files must be Javascript - .js)\n        </Title>\n        <Row justify='center' style={{marginTop:20 , height:500, padding:50, paddingBottom:25}}>\n            <Col span={8} style={{ marginRight: 50 }}>\n                <Card title='Project 1' className='file-card' >\n                    <List \n                        dataSource={this.state.project1Files}\n                        renderItem={ \n                            this.renderProjectItem.bind(this)\n                        }\n                        className='file-list'\n                    />\n                </Card>\n                <Form.Item className='button-row' >\n                    <Input \n                        type=\"file\" \n                        multiple \n                        onChange={this.onFileChangeProject1.bind(this)} >\n                    </Input>\n                </Form.Item> \n            </Col>\n            <Col span={8} style={{ marginLeft:50 }}>\n                <Card title='Project 2' className='file-card'>\n                    <List \n                        dataSource={this.state.project2Files}\n                        renderItem={ \n                            this.renderProjectItem.bind(this)\n                        }\n                        className='file-list'\n                    />\n                </Card>\n                <Form.Item className='button-row' >\n                    <Input \n                        type=\"file\" \n                        multiple \n                        onChange={this.onFileChangeProject2.bind(this)} \n                    />\n                </Form.Item> \n            </Col>\n        </Row>\n        <Row justify='center'>\n            <Button \n                style={{ width:200, color: 'white', background: '#d41b2e', borderColor: 'black' }}\n                onClick={this.compareProject.bind(this)}\n                loading={this.state.loading}\n            >\n                Compare Files\n            </Button>\n        </Row>\n        <Row justify='center' style={{margin:15}}>\n            {this.displayFileUploadError()}\n        </Row>\n    </Content>\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}