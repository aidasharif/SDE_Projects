{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aidasharifrohani/Desktop/Final_submission/client/src/SideBar.tsx\";\nimport { Input, Layout, Image, Row, Button } from 'antd';\nimport React from 'react';\nimport northeastern_logo from './northeastern_logo.png';\nimport line from './line.png';\nimport Title from 'antd/lib/typography/Title';\nimport fire from './Firebase';\nimport { db } from './Firebase';\nconst {\n  Sider\n} = Layout;\n/**\n * Displays and contains information pertaining to the user as well as buttons and\n * options for user navigation on left side of window.\n */\n\nexport default class SideBar extends React.Component {\n  /**\n   * Creates and instance of Sidebar where initial user is set to empty\n   * \n   * @param props values passed from parent component.\n   */\n  constructor(props) {\n    super(props);\n\n    this.logout = () => {\n      // log out of firebase\n      fire.auth().signOut(); // reset user values in app\n\n      this.props.logout(); // set hasError and error message on logout\n\n      this.setState({\n        hasError: false,\n        message: \"\"\n      });\n    };\n\n    this.state = {\n      // whether or not there is an error\n      hasError: false,\n      // error message\n      message: ''\n    };\n  }\n  /**\n   * Called when there is a change in the authentication state\n   */\n\n\n  authListener() {\n    //The onAuthStateChanged method gets invoked in the UI thread on changes in the authentication state:\n    //-Right after the listener has been registered\n    //-When a user is signed in\n    //-When the current user is signed out\n    //-When the current user changes\n    fire.auth().onAuthStateChanged(user => {\n      //if the user is signed it the loggedin state is true\n      if (user) {\n        this.props.setLoggedInStatus(true);\n      } //otherwise it's false\n      else {\n          this.props.setLoggedInStatus(false);\n        }\n    });\n  }\n  /**\n   * The login allows existing users to sign in using their email address and password. \n   * When a user completes the react form, we call login to use the signInWithEmailAndPassword method\n   * \n   * @param event react state\n   */\n\n\n  login(event) {\n    //By calling event.preventDefault() we indicate that we want to prevent the default behavior (the login),\n    // since this code is handling that itself (by calling .signInWithEmailAndPassword).\n    event.preventDefault();\n\n    try {\n      fire.auth().signInWithEmailAndPassword(this.props.email, this.props.password).then(u => {\n        //whenever a user logs in we grab the database info (number of reports) from\n        //fire store and update the info by calling initializeTable to show the previous reports\n        this.props.setLoggedInStatus(true); // access collection of users\n\n        db.collection('users') // access user signed into app\n        .doc(this.props.email + this.props.password) // get number of reports for user\n        .get().then(snapshot => this.props.setReportNumber(snapshot.get('reports')));\n      }).catch(err => {\n        // set error message sent from server\n        this.setState({\n          message: err.message\n        });\n      });\n    } catch (err) {\n      //if for any reasons it can't sign in we get catch the error\n      this.setState({\n        hasError: true,\n        message: \"Login failed\"\n      });\n    }\n  }\n  /**\n   * Sign up form  allows new users to register with our app using their email address and a password. \n   * When a user completes the react app sign up form, it passes the user name and password to \n   * the createUserWithEmailAndPassword method\n   * \n   * @param event react state\n   */\n\n\n  signup(event) {\n    //By calling event.preventDefault() we indicate that we want to prevent the default behavior (the sign up),\n    // since this code is handling that itself (by calling .createUserWithEmailAndPassword).\n    event.preventDefault();\n    fire.auth().createUserWithEmailAndPassword(this.props.email, this.props.password).then(u => {\n      //when a new user signs up we assign a new props for it, setting the number of reports to 0\n      const user = {\n        uid: this.props.email,\n        up: this.props.password,\n        reports: 0\n      }; //in the database of firestore we make a new document for the reports for this user\n      //the key to the document is the combination of user id and password\n\n      db.collection('users').doc(user.uid + user.up).set(user);\n    }).then(() => {\n      //when a new user signs up we automatically sign them in and set their reports to 0\n      this.props.setLoggedInStatus(true);\n      this.props.setReportNumber(0);\n    }).catch(err => {\n      this.setState({\n        message: err.message\n      });\n    });\n  }\n  /**\n   * If there is an error logging in or signing up, display error on screen.\n   */\n\n\n  displayError() {\n    // if error is not null, dispaly error\n    if (this.state.hasError != null) {\n      return /*#__PURE__*/_jsxDEV(Title, {\n        style: {\n          fontSize: 14,\n          color: '#d41b2e'\n        },\n        children: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 20\n      }, this);\n    }\n  }\n  /**\n   * Log out of the user account.\n   */\n\n\n  /**\n   * Returns sider content for user if logged in, otherwise displays generic\n   * content with ability to login and sign up for service.\n   * \n   * @param hasUser whether or not there is a user logged in\n   * @param username name of user logged into app\n   */\n  getSiderContent(hasUser, username) {\n    if (hasUser) {\n      return this.hasUserContent(username);\n    } else {\n      return this.noUserContent();\n    }\n  }\n  /**\n   * Removes the domain name from the user's email.\n   * \n   * @param email \n   */\n\n\n  clipUserName(email) {\n    return email.split('@')[0];\n  }\n  /**\n   * Displays sider content when there is a user logged into the app\n   * \n   * @param email email of user logged into app\n   */\n\n\n  hasUserContent(email) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        style: {\n          color: 'white',\n          width: 200,\n          height: 30,\n          paddingTop: 30,\n          fontSize: 16,\n          wordWrap: 'break-word'\n        },\n        children: this.clipUserName(email)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        justify: \"center\",\n        style: {\n          height: 80\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            width: 180,\n            color: 'white',\n            background: '#d41b2e',\n            borderColor: 'black'\n          },\n          onClick: this.logout.bind(this),\n          children: \"Log Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            width: 180,\n            color: 'white',\n            background: '#d41b2e',\n            borderColor: 'black'\n          },\n          onClick: this.props.getReportTableLayout,\n          children: \"View Reports\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  /**\n   * Displays sider content when there is no user logged into the account\n   */\n\n\n  noUserContent() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        justify: \"center\",\n        gutter: 16,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Email\",\n          style: {\n            height: 35,\n            width: 200,\n            marginTop: 10\n          },\n          onChange: event => {\n            this.props.updateEmail(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Password\",\n          type: \"password\",\n          style: {\n            width: 200,\n            height: 35\n          },\n          onChange: event => {\n            this.props.updatePassword(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        justify: \"center\",\n        gutter: 16,\n        style: {\n          marginTop: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          justify: \"center\",\n          style: {\n            width: 250\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              width: 180,\n              color: 'white',\n              background: '#d41b2e',\n              borderColor: 'black'\n            },\n            onClick: this.login.bind(this),\n            children: \"Log In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              width: 180,\n              color: 'white',\n              background: '#d41b2e',\n              borderColor: 'black'\n            },\n            onClick: this.signup.bind(this),\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          height: 20,\n          width: 180,\n          wordWrap: 'break-word'\n        },\n        children: this.displayError()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Sider, {\n      width: 250,\n      style: {\n        height: 'inherit',\n        textAlign: 'center',\n        background: '#444444'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        src: northeastern_logo,\n        preview: false,\n        width: 200,\n        style: {\n          marginTop: 30\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Title, {\n        style: {\n          color: 'white',\n          fontSize: 25,\n          marginTop: 20,\n          font: ''\n        },\n        children: \"Plagiarism Detector Beta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        src: line,\n        width: 200,\n        preview: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        justify: \"center\",\n        style: {\n          height: 225\n        },\n        children: this.getSiderContent(this.props.loggedin, this.props.email)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        src: line,\n        width: 200,\n        preview: false,\n        style: {\n          marginTop: 5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginTop: 10,\n          width: 180,\n          color: 'white',\n          background: '#d41b2e',\n          borderColor: 'black'\n        },\n        onClick: this.props.getFileUploadLayout,\n        children: \"New Comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginTop: 10,\n          width: 180,\n          color: 'white',\n          background: '#d41b2e',\n          borderColor: 'black'\n        },\n        onClick: this.props.getHelpLayout,\n        children: \"Help\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 16\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/aidasharifrohani/Desktop/Final_submission/client/src/SideBar.tsx"],"names":["Input","Layout","Image","Row","Button","React","northeastern_logo","line","Title","fire","db","Sider","SideBar","Component","constructor","props","logout","auth","signOut","setState","hasError","message","state","authListener","onAuthStateChanged","user","setLoggedInStatus","login","event","preventDefault","signInWithEmailAndPassword","email","password","then","u","collection","doc","get","snapshot","setReportNumber","catch","err","signup","createUserWithEmailAndPassword","uid","up","reports","set","displayError","fontSize","color","getSiderContent","hasUser","username","hasUserContent","noUserContent","clipUserName","split","width","height","paddingTop","wordWrap","background","borderColor","bind","getReportTableLayout","marginTop","updateEmail","target","value","updatePassword","render","textAlign","font","loggedin","getFileUploadLayout","getHelpLayout"],"mappings":"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","sourcesContent":["import { Input, Layout, Image, Row, Button } from 'antd';\nimport React from 'react';\nimport northeastern_logo from './northeastern_logo.png'\nimport line from './line.png'\nimport Title from 'antd/lib/typography/Title';\nimport fire from './Firebase';\nimport { db } from './Firebase';\n\nconst { Sider } = Layout\n\n/**\n * Displays and contains information pertaining to the user as well as buttons and\n * options for user navigation on left side of window.\n */\nexport default class SideBar extends React.Component<any, any> {\n\n    /**\n     * Creates and instance of Sidebar where initial user is set to empty\n     * \n     * @param props values passed from parent component.\n     */\n    constructor(props: {} | Readonly<{}>){\n        super(props)\n        this.state={\n            // whether or not there is an error\n            hasError: false,\n            // error message\n            message:'',\n        }\n    }\n\n    /**\n     * Called when there is a change in the authentication state\n     */\n    authListener() : void {\n        //The onAuthStateChanged method gets invoked in the UI thread on changes in the authentication state:\n        //-Right after the listener has been registered\n        //-When a user is signed in\n        //-When the current user is signed out\n        //-When the current user changes\n        fire.auth().onAuthStateChanged((user) =>{\n            //if the user is signed it the loggedin state is true\n            if(user){\n                this.props.setLoggedInStatus(true);\n            }\n            //otherwise it's false\n            else{\n                this.props.setLoggedInStatus(false);\n            }\n        })\n    }\n\n    /**\n     * The login allows existing users to sign in using their email address and password. \n     * When a user completes the react form, we call login to use the signInWithEmailAndPassword method\n     * \n     * @param event react state\n     */\n    login(event:any) : void {\n        //By calling event.preventDefault() we indicate that we want to prevent the default behavior (the login),\n        // since this code is handling that itself (by calling .signInWithEmailAndPassword).\n        event.preventDefault();\n        try{\n            fire.auth().signInWithEmailAndPassword(this.props.email,this.props.password).then((u)=>\n            {\n                //whenever a user logs in we grab the database info (number of reports) from\n                //fire store and update the info by calling initializeTable to show the previous reports\n                this.props.setLoggedInStatus(true);\n                // access collection of users\n                db.collection('users')\n                // access user signed into app\n                .doc(this.props.email+this.props.password)\n                // get number of reports for user\n                .get().then(snapshot =>(this.props.setReportNumber(snapshot.get('reports'))));\n\n            }).catch((err)=>{\n                // set error message sent from server\n                this.setState({message:err.message})}\n            )}\n        catch(err){\n            //if for any reasons it can't sign in we get catch the error\n            this.setState({\n                hasError: true,\n                message: \"Login failed\"\n            })\n        }  \n    }\n\n    /**\n     * Sign up form  allows new users to register with our app using their email address and a password. \n     * When a user completes the react app sign up form, it passes the user name and password to \n     * the createUserWithEmailAndPassword method\n     * \n     * @param event react state\n     */\n    signup(event:any) : void {\n        //By calling event.preventDefault() we indicate that we want to prevent the default behavior (the sign up),\n        // since this code is handling that itself (by calling .createUserWithEmailAndPassword).\n        event.preventDefault();\n        fire.auth().createUserWithEmailAndPassword(this.props.email,this.props.password).then((u)=>\n        {\n            //when a new user signs up we assign a new props for it, setting the number of reports to 0\n            const user={\n                uid:this.props.email,\n                up:this.props.password,\n                reports: 0\n            }\n            //in the database of firestore we make a new document for the reports for this user\n            //the key to the document is the combination of user id and password\n            db.collection('users').doc(user.uid+user.up).set(user)\n\n        }).then(() =>{\n            //when a new user signs up we automatically sign them in and set their reports to 0\n            this.props.setLoggedInStatus(true);\n            this.props.setReportNumber(0);\n        }).catch((err)=>{\n            this.setState({message:err.message})\n        })\n    }\n\n    /**\n     * If there is an error logging in or signing up, display error on screen.\n     */\n    displayError() : JSX.Element {\n        // if error is not null, dispaly error\n        if (this.state.hasError != null) {\n            return <Title style={{fontSize:14, color:'#d41b2e'}}>\n                {this.state.message}\n            </Title>\n        } else {\n            return <Title></Title>\n        }\n    }\n\n    /**\n     * Log out of the user account.\n     */\n    logout = () => {\n        // log out of firebase\n        fire.auth().signOut();\n        // reset user values in app\n        this.props.logout();\n\n        // set hasError and error message on logout\n        this.setState({\n            hasError: false,\n            message: \"\"\n        })\n\n    }\n\n    /**\n     * Returns sider content for user if logged in, otherwise displays generic\n     * content with ability to login and sign up for service.\n     * \n     * @param hasUser whether or not there is a user logged in\n     * @param username name of user logged into app\n     */\n    getSiderContent(hasUser: boolean, username: string) : JSX.Element {\n        if (hasUser) {\n            return this.hasUserContent(username);\n        } else {\n            return this.noUserContent();\n        }\n    }\n\n    /**\n     * Removes the domain name from the user's email.\n     * \n     * @param email \n     */\n    clipUserName(email: string) : string {\n        return email.split('@')[0];\n    }\n\n    /**\n     * Displays sider content when there is a user logged into the app\n     * \n     * @param email email of user logged into app\n     */\n    hasUserContent(email: string) : JSX.Element {\n        return <>\n            <Title style={{\n                    color:'white', \n                    width:200, \n                    height:30, \n                    paddingTop:30, \n                    fontSize: 16, \n                    wordWrap:'break-word'\n                }}\n            >\n                {this.clipUserName(email)}\n            </Title>\n            <Row justify='center' style={{height:80}}>\n                <Button \n                    style={{ width: 180, color: 'white', background: '#d41b2e', borderColor: 'black' }}\n                    onClick={this.logout.bind(this)}\n                >\n                    Log Out\n                </Button>\n                <Button \n                    style={{ width: 180, color: 'white', background: '#d41b2e', borderColor: 'black' }}\n                    onClick={this.props.getReportTableLayout}\n                >\n                    View Reports\n                </Button>\n            </Row>\n        </>\n    }\n\n    /**\n     * Displays sider content when there is no user logged into the account\n     */\n    noUserContent() : JSX.Element {\n\n        return <>\n        <Row justify='center' gutter={16}>\n            <Input\n                placeholder='Email'\n                style={{height:35, width: 200, marginTop: 10 }} \n                onChange={(event) => { this.props.updateEmail(event.target.value) }}\n            />\n            <Input\n                placeholder='Password'\n                type='password'\n                style={{ width: 200, height:35 }} \n                onChange={(event) => { this.props.updatePassword(event.target.value) }}\n            />\n        </Row>\n        <Row justify='center' gutter={16} style={{marginTop:10}}>\n            <Row justify='center' style={{ width:250 }}>\n                <Button\n                    style={{ width: 180, color: 'white', background: '#d41b2e', borderColor: 'black' }}\n                    onClick={this.login.bind(this)}\n                >\n                    Log In\n                </Button>\n            </Row>\n            <Row>\n                <Button \n                    style={{ width: 180, color: 'white', background: '#d41b2e', borderColor: 'black' }}\n                    onClick={this.signup.bind(this)}\n                >\n                    Sign Up\n                </Button>\n            </Row>\n        </Row>\n            <Row style={{height:20, width:180, wordWrap:'break-word'}}>\n                {this.displayError()}\n            </Row>\n            </>\n        \n    }\n\n    render() {\n        return <Sider width={250}\n            style={{height:'inherit', textAlign:'center', background:'#444444'}}\n            >\n            <Image\n                src={northeastern_logo}\n                preview={false}\n                width={200}\n                style={{marginTop:30}}\n            />\n            <Title style={{color:'white', fontSize:25, marginTop:20, font:''}}>\n                Plagiarism Detector Beta\n            </Title>\n            <Image \n                src={line}\n                width={200}\n                preview={false}\n            />\n            <Row justify='center' style={{ height:225 }}>\n            { this.getSiderContent(this.props.loggedin, this.props.email) }\n            </Row>\n            <Image \n                src={line}\n                width={200}\n                preview={false}\n                style={{marginTop:5}}\n            />\n            <Button \n                style={{marginTop:10, width:180, color:'white', background:'#d41b2e', borderColor:'black'}} \n                onClick={this.props.getFileUploadLayout}\n            >\n                New Comparison\n            </Button>\n            <Button \n                style={{marginTop:10, width:180, color:'white', background:'#d41b2e', borderColor:'black'}} \n                onClick={this.props.getHelpLayout}\n            >\n                Help\n            </Button>\n        </Sider>\n\n    }\n}"]},"metadata":{},"sourceType":"module"}